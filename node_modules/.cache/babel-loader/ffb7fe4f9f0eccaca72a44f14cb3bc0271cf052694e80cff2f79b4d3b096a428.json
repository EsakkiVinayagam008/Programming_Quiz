{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ACER\\\\OneDrive\\\\Desktop\\\\Mainproject\\\\quiz\\\\src\\\\Componend\\\\Htmlpage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faArrowRight } from '@fortawesome/free-solid-svg-icons';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Htmlpage = () => {\n  _s();\n  document.body.style.fontFamily = 'Nunito, sans-serif';\n  document.body.style.background = '#1976D2';\n  document.body.style.color = 'white';\n  const but = {\n    position: 'relative',\n    left: '1200px',\n    bottom: '330px',\n    width: '100px',\n    height: '200px',\n    background: '#292828'\n  };\n  const but1 = {\n    position: 'relative',\n    left: '900px',\n    top: '60px',\n    width: '160px',\n    height: '80px',\n    background: 'green'\n  };\n  const [selectedOptions, setSelectedOptions] = useState(Array(10).fill(''));\n  const navigate = useNavigate();\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [showResults, setShowResults] = useState(false);\n  const [score, setScore] = useState(0); // State to hold the score\n\n  const handleOptionChange = (index, event) => {\n    const newSelectedOptions = [...selectedOptions];\n    newSelectedOptions[index] = event.target.value;\n    setSelectedOptions(newSelectedOptions);\n  };\n  const calculateScore = () => {\n    let totalScore = 0;\n    for (let i = 0; i < questions.length; i++) {\n      if (selectedOptions[i] === questions[i].answer) {\n        totalScore++;\n      }\n    }\n    return totalScore;\n  };\n  const handleNextQuestion = () => {\n    if (selectedOptions[currentQuestionIndex] !== '') {\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\n    } else {\n      alert('Please select an answer before moving to the next question.');\n    }\n  };\n  const handleCalculateScore = () => {\n    const calculatedScore = calculateScore();\n    setScore(calculatedScore); // Set the score\n    setShowResults(true);\n    navigate('/Scorepage'); // Navigate to Scorepage\n  };\n  const [questions] = useState([\n    // Define your questions array here\n  ]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        background: 'black',\n        width: '80%',\n        height: '750px',\n        marginTop: '80px',\n        marginLeft: '200px'\n      },\n      className: \"rounded-full\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-4xl ml-48  pt-32\",\n        children: questions[currentQuestionIndex].question\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex flex-col gap-2 pt-20 ml-56 text-4xl\",\n        children: [questions[currentQuestionIndex].options.map((option, index) => /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"inline-flex items-center\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"radio\",\n            value: option,\n            checked: selectedOptions[currentQuestionIndex] === option,\n            onChange: e => handleOptionChange(currentQuestionIndex, e),\n            className: \"form-radio text-blue-500 h-5 w-5\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"ml-2\",\n            children: option\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 29\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 25\n        }, this)), showResults && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"mt-24\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"text-4xl\",\n            style: {\n              color: '#3d8fdb'\n            },\n            children: \"Selected Answer : \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"text-5xl\",\n            style: {\n              color: selectedOptions[currentQuestionIndex] === questions[currentQuestionIndex].answer ? 'green' : 'red'\n            },\n            children: selectedOptions[currentQuestionIndex]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 25\n        }, this), currentQuestionIndex === questions.length - 1 ? /*#__PURE__*/_jsxDEV(\"button\", {\n          style: but1,\n          className: \"rounded-full\",\n          onClick: handleCalculateScore,\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 25\n        }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n          style: but,\n          className: \"rounded-full\",\n          onClick: handleNextQuestion,\n          children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n            icon: faArrowRight,\n            className: \"text-3xl\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n_s(Htmlpage, \"j11LGzLc28vxheZwQoo4qU+Toi4=\", false, function () {\n  return [useNavigate];\n});\n_c = Htmlpage;\nexport default Htmlpage;\nvar _c;\n$RefreshReg$(_c, \"Htmlpage\");","map":{"version":3,"names":["React","useState","FontAwesomeIcon","faArrowRight","useNavigate","jsxDEV","_jsxDEV","Fragment","_Fragment","Htmlpage","_s","document","body","style","fontFamily","background","color","but","position","left","bottom","width","height","but1","top","selectedOptions","setSelectedOptions","Array","fill","navigate","currentQuestionIndex","setCurrentQuestionIndex","showResults","setShowResults","score","setScore","handleOptionChange","index","event","newSelectedOptions","target","value","calculateScore","totalScore","i","questions","length","answer","handleNextQuestion","alert","handleCalculateScore","calculatedScore","children","marginTop","marginLeft","className","question","fileName","_jsxFileName","lineNumber","columnNumber","options","map","option","type","checked","onChange","e","onClick","icon","_c","$RefreshReg$"],"sources":["C:/Users/ACER/OneDrive/Desktop/Mainproject/quiz/src/Componend/Htmlpage.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faArrowRight } from '@fortawesome/free-solid-svg-icons';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst Htmlpage = () => {\r\n    document.body.style.fontFamily = 'Nunito, sans-serif';\r\n    document.body.style.background = '#1976D2';\r\n    document.body.style.color = 'white';\r\n\r\n    const but = {\r\n        position: 'relative',\r\n        left: '1200px',\r\n        bottom: '330px',\r\n        width: '100px',\r\n        height: '200px',\r\n        background: '#292828'\r\n    };\r\n\r\n    const but1 = {\r\n        position: 'relative',\r\n        left: '900px',\r\n        top: '60px',\r\n        width: '160px',\r\n        height: '80px',\r\n        background: 'green'\r\n    };\r\n\r\n    const [selectedOptions, setSelectedOptions] = useState(Array(10).fill(''));\r\n    const navigate = useNavigate();\r\n    const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n    const [showResults, setShowResults] = useState(false);\r\n    const [score, setScore] = useState(0); // State to hold the score\r\n\r\n    const handleOptionChange = (index, event) => {\r\n        const newSelectedOptions = [...selectedOptions];\r\n        newSelectedOptions[index] = event.target.value;\r\n        setSelectedOptions(newSelectedOptions);\r\n    };\r\n\r\n    const calculateScore = () => {\r\n        let totalScore = 0;\r\n        for (let i = 0; i < questions.length; i++) {\r\n            if (selectedOptions[i] === questions[i].answer) {\r\n                totalScore++;\r\n            }\r\n        }\r\n        return totalScore;\r\n    };\r\n\r\n    const handleNextQuestion = () => {\r\n        if (selectedOptions[currentQuestionIndex] !== '') {\r\n            setCurrentQuestionIndex(currentQuestionIndex + 1);\r\n        } else {\r\n            alert('Please select an answer before moving to the next question.');\r\n        }\r\n    };\r\n\r\n    const handleCalculateScore = () => {\r\n        const calculatedScore = calculateScore();\r\n        setScore(calculatedScore); // Set the score\r\n        setShowResults(true);\r\n        navigate('/Scorepage'); // Navigate to Scorepage\r\n    };\r\n\r\n    const [questions] = useState([\r\n        // Define your questions array here\r\n    ]);\r\n\r\n    return (\r\n        <>\r\n            <div style={{ background: 'black', width: '80%', height: '750px', marginTop: '80px', marginLeft: '200px' }} className=\"rounded-full\">\r\n                <h1 className=\"text-4xl ml-48  pt-32\">{questions[currentQuestionIndex].question}</h1>\r\n                <div className=\"flex flex-col gap-2 pt-20 ml-56 text-4xl\">\r\n                    {questions[currentQuestionIndex].options.map((option, index) => (\r\n                        <label key={index} className=\"inline-flex items-center\">\r\n                            <input\r\n                                type=\"radio\"\r\n                                value={option}\r\n                                checked={selectedOptions[currentQuestionIndex] === option}\r\n                                onChange={(e) => handleOptionChange(currentQuestionIndex, e)}\r\n                                className=\"form-radio text-blue-500 h-5 w-5\"\r\n                            />\r\n                            <span className=\"ml-2\">{option}</span>\r\n                        </label>\r\n                    ))}\r\n                    {showResults && (\r\n                        <p className=\"mt-24\">\r\n                            <span className=\"text-4xl\" style={{ color: '#3d8fdb' }}>Selected Answer : </span>\r\n                            <span className=\"text-5xl\" style={{ color: selectedOptions[currentQuestionIndex] === questions[currentQuestionIndex].answer ? 'green' : 'red' }}>\r\n                                {selectedOptions[currentQuestionIndex]}\r\n                            </span>\r\n                        </p>\r\n                    )}\r\n                    {currentQuestionIndex === questions.length - 1 ? (\r\n                        <button style={but1} className=\"rounded-full\" onClick={handleCalculateScore}>\r\n                            Submit\r\n                        </button>\r\n                    ) : (\r\n                        <button style={but} className=\"rounded-full\" onClick={handleNextQuestion}>\r\n                            <FontAwesomeIcon icon={faArrowRight} className=\"text-3xl\" />\r\n                        </button>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Htmlpage;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,eAAe,QAAQ,gCAAgC;AAChE,SAASC,YAAY,QAAQ,mCAAmC;AAChE,SAASC,WAAW,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAE/C,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACnBC,QAAQ,CAACC,IAAI,CAACC,KAAK,CAACC,UAAU,GAAG,oBAAoB;EACrDH,QAAQ,CAACC,IAAI,CAACC,KAAK,CAACE,UAAU,GAAG,SAAS;EAC1CJ,QAAQ,CAACC,IAAI,CAACC,KAAK,CAACG,KAAK,GAAG,OAAO;EAEnC,MAAMC,GAAG,GAAG;IACRC,QAAQ,EAAE,UAAU;IACpBC,IAAI,EAAE,QAAQ;IACdC,MAAM,EAAE,OAAO;IACfC,KAAK,EAAE,OAAO;IACdC,MAAM,EAAE,OAAO;IACfP,UAAU,EAAE;EAChB,CAAC;EAED,MAAMQ,IAAI,GAAG;IACTL,QAAQ,EAAE,UAAU;IACpBC,IAAI,EAAE,OAAO;IACbK,GAAG,EAAE,MAAM;IACXH,KAAK,EAAE,OAAO;IACdC,MAAM,EAAE,MAAM;IACdP,UAAU,EAAE;EAChB,CAAC;EAED,MAAM,CAACU,eAAe,EAAEC,kBAAkB,CAAC,GAAGzB,QAAQ,CAAC0B,KAAK,CAAC,EAAE,CAAC,CAACC,IAAI,CAAC,EAAE,CAAC,CAAC;EAC1E,MAAMC,QAAQ,GAAGzB,WAAW,CAAC,CAAC;EAC9B,MAAM,CAAC0B,oBAAoB,EAAEC,uBAAuB,CAAC,GAAG9B,QAAQ,CAAC,CAAC,CAAC;EACnE,MAAM,CAAC+B,WAAW,EAAEC,cAAc,CAAC,GAAGhC,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAM,CAACiC,KAAK,EAAEC,QAAQ,CAAC,GAAGlC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;;EAEvC,MAAMmC,kBAAkB,GAAGA,CAACC,KAAK,EAAEC,KAAK,KAAK;IACzC,MAAMC,kBAAkB,GAAG,CAAC,GAAGd,eAAe,CAAC;IAC/Cc,kBAAkB,CAACF,KAAK,CAAC,GAAGC,KAAK,CAACE,MAAM,CAACC,KAAK;IAC9Cf,kBAAkB,CAACa,kBAAkB,CAAC;EAC1C,CAAC;EAED,MAAMG,cAAc,GAAGA,CAAA,KAAM;IACzB,IAAIC,UAAU,GAAG,CAAC;IAClB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGC,SAAS,CAACC,MAAM,EAAEF,CAAC,EAAE,EAAE;MACvC,IAAInB,eAAe,CAACmB,CAAC,CAAC,KAAKC,SAAS,CAACD,CAAC,CAAC,CAACG,MAAM,EAAE;QAC5CJ,UAAU,EAAE;MAChB;IACJ;IACA,OAAOA,UAAU;EACrB,CAAC;EAED,MAAMK,kBAAkB,GAAGA,CAAA,KAAM;IAC7B,IAAIvB,eAAe,CAACK,oBAAoB,CAAC,KAAK,EAAE,EAAE;MAC9CC,uBAAuB,CAACD,oBAAoB,GAAG,CAAC,CAAC;IACrD,CAAC,MAAM;MACHmB,KAAK,CAAC,6DAA6D,CAAC;IACxE;EACJ,CAAC;EAED,MAAMC,oBAAoB,GAAGA,CAAA,KAAM;IAC/B,MAAMC,eAAe,GAAGT,cAAc,CAAC,CAAC;IACxCP,QAAQ,CAACgB,eAAe,CAAC,CAAC,CAAC;IAC3BlB,cAAc,CAAC,IAAI,CAAC;IACpBJ,QAAQ,CAAC,YAAY,CAAC,CAAC,CAAC;EAC5B,CAAC;EAED,MAAM,CAACgB,SAAS,CAAC,GAAG5C,QAAQ,CAAC;IACzB;EAAA,CACH,CAAC;EAEF,oBACIK,OAAA,CAAAE,SAAA;IAAA4C,QAAA,eACI9C,OAAA;MAAKO,KAAK,EAAE;QAAEE,UAAU,EAAE,OAAO;QAAEM,KAAK,EAAE,KAAK;QAAEC,MAAM,EAAE,OAAO;QAAE+B,SAAS,EAAE,MAAM;QAAEC,UAAU,EAAE;MAAQ,CAAE;MAACC,SAAS,EAAC,cAAc;MAAAH,QAAA,gBAChI9C,OAAA;QAAIiD,SAAS,EAAC,uBAAuB;QAAAH,QAAA,EAAEP,SAAS,CAACf,oBAAoB,CAAC,CAAC0B;MAAQ;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACrFtD,OAAA;QAAKiD,SAAS,EAAC,0CAA0C;QAAAH,QAAA,GACpDP,SAAS,CAACf,oBAAoB,CAAC,CAAC+B,OAAO,CAACC,GAAG,CAAC,CAACC,MAAM,EAAE1B,KAAK,kBACvD/B,OAAA;UAAmBiD,SAAS,EAAC,0BAA0B;UAAAH,QAAA,gBACnD9C,OAAA;YACI0D,IAAI,EAAC,OAAO;YACZvB,KAAK,EAAEsB,MAAO;YACdE,OAAO,EAAExC,eAAe,CAACK,oBAAoB,CAAC,KAAKiC,MAAO;YAC1DG,QAAQ,EAAGC,CAAC,IAAK/B,kBAAkB,CAACN,oBAAoB,EAAEqC,CAAC,CAAE;YAC7DZ,SAAS,EAAC;UAAkC;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC/C,CAAC,eACFtD,OAAA;YAAMiD,SAAS,EAAC,MAAM;YAAAH,QAAA,EAAEW;UAAM;YAAAN,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC;QAAA,GAR9BvB,KAAK;UAAAoB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OASV,CACV,CAAC,EACD5B,WAAW,iBACR1B,OAAA;UAAGiD,SAAS,EAAC,OAAO;UAAAH,QAAA,gBAChB9C,OAAA;YAAMiD,SAAS,EAAC,UAAU;YAAC1C,KAAK,EAAE;cAAEG,KAAK,EAAE;YAAU,CAAE;YAAAoC,QAAA,EAAC;UAAkB;YAAAK,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM,CAAC,eACjFtD,OAAA;YAAMiD,SAAS,EAAC,UAAU;YAAC1C,KAAK,EAAE;cAAEG,KAAK,EAAES,eAAe,CAACK,oBAAoB,CAAC,KAAKe,SAAS,CAACf,oBAAoB,CAAC,CAACiB,MAAM,GAAG,OAAO,GAAG;YAAM,CAAE;YAAAK,QAAA,EAC3I3B,eAAe,CAACK,oBAAoB;UAAC;YAAA2B,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACpC,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACR,CACN,EACA9B,oBAAoB,KAAKe,SAAS,CAACC,MAAM,GAAG,CAAC,gBAC1CxC,OAAA;UAAQO,KAAK,EAAEU,IAAK;UAACgC,SAAS,EAAC,cAAc;UAACa,OAAO,EAAElB,oBAAqB;UAAAE,QAAA,EAAC;QAE7E;UAAAK,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,gBAETtD,OAAA;UAAQO,KAAK,EAAEI,GAAI;UAACsC,SAAS,EAAC,cAAc;UAACa,OAAO,EAAEpB,kBAAmB;UAAAI,QAAA,eACrE9C,OAAA,CAACJ,eAAe;YAACmE,IAAI,EAAElE,YAAa;YAACoD,SAAS,EAAC;UAAU;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACxD,CACX;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL;EAAC,gBACR,CAAC;AAEX,CAAC;AAAClD,EAAA,CAtGID,QAAQ;EAAA,QAwBOL,WAAW;AAAA;AAAAkE,EAAA,GAxB1B7D,QAAQ;AAwGd,eAAeA,QAAQ;AAAC,IAAA6D,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}